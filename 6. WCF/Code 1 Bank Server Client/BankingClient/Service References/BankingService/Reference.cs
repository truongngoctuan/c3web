//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankingClient.BankingService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/BankingService")]
    [System.SerializableAttribute()]
    public partial class FaultMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BankingService.IBankingService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IBankingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Login", ReplyAction="http://tempuri.org/IBankingService/LoginResponse")]
        bool Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankingService/Login", ReplyAction="http://tempuri.org/IBankingService/LoginResponse")]
        System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        bool EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IBankingService/Logout", ReplyAction="http://tempuri.org/IBankingService/LogoutResponse")]
        void Logout();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, AsyncPattern=true, Action="http://tempuri.org/IBankingService/Logout", ReplyAction="http://tempuri.org/IBankingService/LogoutResponse")]
        System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState);
        
        void EndLogout(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/GetCurrentMoney", ReplyAction="http://tempuri.org/IBankingService/GetCurrentMoneyResponse")]
        double GetCurrentMoney();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankingService/GetCurrentMoney", ReplyAction="http://tempuri.org/IBankingService/GetCurrentMoneyResponse")]
        System.IAsyncResult BeginGetCurrentMoney(System.AsyncCallback callback, object asyncState);
        
        double EndGetCurrentMoney(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Deposit", ReplyAction="http://tempuri.org/IBankingService/DepositResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BankingClient.BankingService.FaultMessage), Action="http://tempuri.org/IBankingService/DepositFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/BankingService")]
        bool Deposit(double value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankingService/Deposit", ReplyAction="http://tempuri.org/IBankingService/DepositResponse")]
        System.IAsyncResult BeginDeposit(double value, System.AsyncCallback callback, object asyncState);
        
        bool EndDeposit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankingService/Withdraw", ReplyAction="http://tempuri.org/IBankingService/WithdrawResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(BankingClient.BankingService.FaultMessage), Action="http://tempuri.org/IBankingService/WithdrawFaultMessageFault", Name="FaultMessage", Namespace="http://schemas.datacontract.org/2004/07/BankingService")]
        bool Withdraw(double value);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IBankingService/Withdraw", ReplyAction="http://tempuri.org/IBankingService/WithdrawResponse")]
        System.IAsyncResult BeginWithdraw(double value, System.AsyncCallback callback, object asyncState);
        
        bool EndWithdraw(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IBankingServiceChannel : BankingClient.BankingService.IBankingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetCurrentMoneyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCurrentMoneyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DepositCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DepositCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class WithdrawCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WithdrawCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class BankingServiceClient : System.ServiceModel.ClientBase<BankingClient.BankingService.IBankingService>, BankingClient.BankingService.IBankingService {
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoutDelegate;
        
        private EndOperationDelegate onEndLogoutDelegate;
        
        private System.Threading.SendOrPostCallback onLogoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCurrentMoneyDelegate;
        
        private EndOperationDelegate onEndGetCurrentMoneyDelegate;
        
        private System.Threading.SendOrPostCallback onGetCurrentMoneyCompletedDelegate;
        
        private BeginOperationDelegate onBeginDepositDelegate;
        
        private EndOperationDelegate onEndDepositDelegate;
        
        private System.Threading.SendOrPostCallback onDepositCompletedDelegate;
        
        private BeginOperationDelegate onBeginWithdrawDelegate;
        
        private EndOperationDelegate onEndWithdrawDelegate;
        
        private System.Threading.SendOrPostCallback onWithdrawCompletedDelegate;
        
        public BankingServiceClient() {
        }
        
        public BankingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogoutCompleted;
        
        public event System.EventHandler<GetCurrentMoneyCompletedEventArgs> GetCurrentMoneyCompleted;
        
        public event System.EventHandler<DepositCompletedEventArgs> DepositCompleted;
        
        public event System.EventHandler<WithdrawCompletedEventArgs> WithdrawCompleted;
        
        public bool Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return this.BeginLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            bool retVal = this.EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        public void LoginAsync(string username, string password, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        username,
                        password}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        public void Logout() {
            base.Channel.Logout();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogout(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogout(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogout(System.IAsyncResult result) {
            base.Channel.EndLogout(result);
        }
        
        private System.IAsyncResult OnBeginLogout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginLogout(callback, asyncState);
        }
        
        private object[] OnEndLogout(System.IAsyncResult result) {
            this.EndLogout(result);
            return null;
        }
        
        private void OnLogoutCompleted(object state) {
            if ((this.LogoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoutCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        public void LogoutAsync(object userState) {
            if ((this.onBeginLogoutDelegate == null)) {
                this.onBeginLogoutDelegate = new BeginOperationDelegate(this.OnBeginLogout);
            }
            if ((this.onEndLogoutDelegate == null)) {
                this.onEndLogoutDelegate = new EndOperationDelegate(this.OnEndLogout);
            }
            if ((this.onLogoutCompletedDelegate == null)) {
                this.onLogoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoutCompleted);
            }
            base.InvokeAsync(this.onBeginLogoutDelegate, null, this.onEndLogoutDelegate, this.onLogoutCompletedDelegate, userState);
        }
        
        public double GetCurrentMoney() {
            return base.Channel.GetCurrentMoney();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCurrentMoney(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCurrentMoney(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndGetCurrentMoney(System.IAsyncResult result) {
            return base.Channel.EndGetCurrentMoney(result);
        }
        
        private System.IAsyncResult OnBeginGetCurrentMoney(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCurrentMoney(callback, asyncState);
        }
        
        private object[] OnEndGetCurrentMoney(System.IAsyncResult result) {
            double retVal = this.EndGetCurrentMoney(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCurrentMoneyCompleted(object state) {
            if ((this.GetCurrentMoneyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCurrentMoneyCompleted(this, new GetCurrentMoneyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCurrentMoneyAsync() {
            this.GetCurrentMoneyAsync(null);
        }
        
        public void GetCurrentMoneyAsync(object userState) {
            if ((this.onBeginGetCurrentMoneyDelegate == null)) {
                this.onBeginGetCurrentMoneyDelegate = new BeginOperationDelegate(this.OnBeginGetCurrentMoney);
            }
            if ((this.onEndGetCurrentMoneyDelegate == null)) {
                this.onEndGetCurrentMoneyDelegate = new EndOperationDelegate(this.OnEndGetCurrentMoney);
            }
            if ((this.onGetCurrentMoneyCompletedDelegate == null)) {
                this.onGetCurrentMoneyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCurrentMoneyCompleted);
            }
            base.InvokeAsync(this.onBeginGetCurrentMoneyDelegate, null, this.onEndGetCurrentMoneyDelegate, this.onGetCurrentMoneyCompletedDelegate, userState);
        }
        
        public bool Deposit(double value) {
            return base.Channel.Deposit(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeposit(double value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeposit(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeposit(System.IAsyncResult result) {
            return base.Channel.EndDeposit(result);
        }
        
        private System.IAsyncResult OnBeginDeposit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double value = ((double)(inValues[0]));
            return this.BeginDeposit(value, callback, asyncState);
        }
        
        private object[] OnEndDeposit(System.IAsyncResult result) {
            bool retVal = this.EndDeposit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDepositCompleted(object state) {
            if ((this.DepositCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DepositCompleted(this, new DepositCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DepositAsync(double value) {
            this.DepositAsync(value, null);
        }
        
        public void DepositAsync(double value, object userState) {
            if ((this.onBeginDepositDelegate == null)) {
                this.onBeginDepositDelegate = new BeginOperationDelegate(this.OnBeginDeposit);
            }
            if ((this.onEndDepositDelegate == null)) {
                this.onEndDepositDelegate = new EndOperationDelegate(this.OnEndDeposit);
            }
            if ((this.onDepositCompletedDelegate == null)) {
                this.onDepositCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDepositCompleted);
            }
            base.InvokeAsync(this.onBeginDepositDelegate, new object[] {
                        value}, this.onEndDepositDelegate, this.onDepositCompletedDelegate, userState);
        }
        
        public bool Withdraw(double value) {
            return base.Channel.Withdraw(value);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginWithdraw(double value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWithdraw(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndWithdraw(System.IAsyncResult result) {
            return base.Channel.EndWithdraw(result);
        }
        
        private System.IAsyncResult OnBeginWithdraw(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double value = ((double)(inValues[0]));
            return this.BeginWithdraw(value, callback, asyncState);
        }
        
        private object[] OnEndWithdraw(System.IAsyncResult result) {
            bool retVal = this.EndWithdraw(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWithdrawCompleted(object state) {
            if ((this.WithdrawCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WithdrawCompleted(this, new WithdrawCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WithdrawAsync(double value) {
            this.WithdrawAsync(value, null);
        }
        
        public void WithdrawAsync(double value, object userState) {
            if ((this.onBeginWithdrawDelegate == null)) {
                this.onBeginWithdrawDelegate = new BeginOperationDelegate(this.OnBeginWithdraw);
            }
            if ((this.onEndWithdrawDelegate == null)) {
                this.onEndWithdrawDelegate = new EndOperationDelegate(this.OnEndWithdraw);
            }
            if ((this.onWithdrawCompletedDelegate == null)) {
                this.onWithdrawCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWithdrawCompleted);
            }
            base.InvokeAsync(this.onBeginWithdrawDelegate, new object[] {
                        value}, this.onEndWithdrawDelegate, this.onWithdrawCompletedDelegate, userState);
        }
    }
}
